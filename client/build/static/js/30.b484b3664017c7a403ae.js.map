{"version":3,"sources":["webpack:///./src/util/formatFunctions.js","webpack:///./src/components/Header/TopBar.jsx"],"names":["__webpack_require__","d","__webpack_exports__","formatPrice","formatVolume","formatPercentage","price","sd","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","useGrouping","format","minimumSignificantDigits","maximumSignificantDigits","volume","percentage","r","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_redux__WEBPACK_IMPORTED_MODULE_1__","lodash_reduce__WEBPACK_IMPORTED_MODULE_2__","lodash_reduce__WEBPACK_IMPORTED_MODULE_2___default","_util_formatFunctions__WEBPACK_IMPORTED_MODULE_3__","Tooltip","lazy","e","then","t","bind","Typography","TableRow","TableBody","TableCell","Table","TopBar","connect","_ref2","market","time","viewport","_ref","a","createElement","combinedVolume","reduce","totalSum","p","market_data","sum","emd","volume_dai","exchangeCount","exchanges","length","exchangeNames","map","exchange","name","join","marketSize","secondsSinceUpdate","Math","round","timestamp","latestUpdateExchange","find","ID","lastUpdateExchangeID","rows","tooltipLeft","textLeft","textRight","tooltipRight","concat","vh","height","max","document","documentElement","clientHeight","window","innerHeight","colGroup","width","rowsToInclude","slicedRows","slice","padding","tableLayout","rightElement","title","placement","variant","key","align","fallback","fontWeight"],"mappings":"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","file":"static/js/30.b484b3664017c7a403ae.js","sourcesContent":["const formatPrice = (price) => {\n\tconst sd = (price) => {\n\t\tif (price < 0.01) {\n\t\t\treturn 1;\n\t\t} else if (price < 0.1) {\n\t\t\treturn 2;\n\t\t} else if (price < 1) {\n\t\t\treturn 3;\n\t\t} else {\n\t\t\treturn 4;\n\t\t}\n\t};\n\tif (price < 0.001) {\n\t\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t\tmaximumFractionDigits: 3,\n\t\t\tminimumFractionDigits: 3,\n\t\t\tuseGrouping: \"true\"\n\t\t}).format(price));\n\t} else {\n\t\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t\tminimumSignificantDigits: sd(price),\n\t\t\tmaximumSignificantDigits: sd(price),\n\t\t\tuseGrouping: \"true\"\n\t\t}).format(price));\n\t}\n};\n\nconst formatVolume = (volume) => {\n\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\tstyle: \"currency\", currency: \"USD\", useGrouping: \"true\"\n\t}).format(volume));\n};\n\nconst formatPercentage = (percentage) => {\n\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\tstyle: \"percent\", useGrouping: \"true\", minimumFractionDigits: 2, maximumFractionDigits: 2\n\t}).format(percentage));\n};\n\nexport {\n\tformatPrice, formatVolume, formatPercentage,\n};","import React, { lazy, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport reduce from \"lodash/reduce\";\n\nimport { formatVolume } from \"../../util/formatFunctions\";\n\nconst Tooltip = lazy(() => import(\"@material-ui/core/Tooltip/Tooltip\"));\nconst Typography = lazy(() => import(\"@material-ui/core/Typography/Typography\"));\nconst TableRow = lazy(() => import(\"@material-ui/core/TableRow/TableRow\"));\nconst TableBody = lazy(() => import(\"@material-ui/core/TableBody/TableBody\"));\nconst TableCell = lazy(() => import(\"@material-ui/core/TableCell/TableCell\"));\nconst Table = lazy(() => import(\"@material-ui/core/Table/Table\"));\n\nconst unconnectedTopBar = ({ market, time, viewport }) => {\n\tif (!market.market) return <div>Loading...</div>;\n\n\tconst combinedVolume = formatVolume(reduce(market.market, (totalSum, p) =>\n\t\ttotalSum + reduce(p.market_data, (sum, emd) => sum + emd.volume_dai, 0), 0));\n\tconst exchangeCount = market.exchanges.length;\n\tconst exchangeNames = market.exchanges.map(exchange => exchange.name).join(\", \");\n\tconst marketSize = market.market.length;\n\tconst secondsSinceUpdate = Math.round((time - market.timestamp) / 1000);\n\tconst latestUpdateExchange = market.exchanges.find(e => e.ID === market.lastUpdateExchangeID).name;\n\tconst rows = [{\n\t\ttooltipLeft: `A list of all exchanges from which market data is included.`,\n\t\ttextLeft: `Exchanges`,\n\t\ttextRight: exchangeCount,\n\t\ttooltipRight: exchangeNames,\n\t}, {\n\t\ttooltipLeft: `The sum of volumes of all market pairs across all exchanges.`,\n\t\ttextLeft: `Combined Volume (24h) [DAI]`,\n\t\ttextRight: combinedVolume,\n\t}, {\n\t\ttooltipLeft: `The total amount of market pairs being listed.`,\n\t\ttextLeft: `Pairs`,\n\t\ttextRight: marketSize\n\t}, {\n\t\ttooltipLeft: `The exchange of and the time since the last update to the market data.`,\n\t\ttextLeft: `Latest Update`,\n\t\ttextRight: `${latestUpdateExchange}, ${secondsSinceUpdate} seconds ago`\n\t},];\n\n\tconst vh = viewport.height || Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\n\tconst colGroup = (vh < 900) ? (\n\t\t<colgroup>\n\t\t\t<col style={{ width: \"45%\" }}/>\n\t\t\t<col style={{ width: \"55%\" }}/>\n\t\t</colgroup>\n\t) : (\n\t\t<colgroup>\n\t\t\t<col style={{ width: \"50%\" }}/>\n\t\t\t<col style={{ width: \"50%\" }}/>\n\t\t</colgroup>\n\t);\n\n\tconst rowsToInclude = (vh < 900) ? [3] : [0, 1, 2, 3];\n\tconst slicedRows = rows.slice(rowsToInclude[0], rowsToInclude[rowsToInclude.length - 1] + 1);\n\n\treturn (\n\t\t<Table\n\t\t\tpadding=\"dense\"\n\t\t\tstyle={{ tableLayout: \"fixed\" }}\n\t\t>\n\t\t\t{colGroup}\n\t\t\t<TableBody>\n\t\t\t\t{slicedRows.map((r) => {\n\t\t\t\t\tconst rightElement = (r.tooltipRight) ? (\n\t\t\t\t\t\t<Tooltip title={r.tooltipRight} placement=\"bottom\">\n\t\t\t\t\t\t\t<Typography variant=\"caption\">{r.textRight}</Typography>\n\t\t\t\t\t\t</Tooltip>) : <Typography variant=\"caption\">{r.textRight}</Typography>;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<TableRow style={{ height: \"4vh\" }} key={r.tooltipLeft}>\n\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t<Tooltip title={r.tooltipLeft} placement=\"bottom\">\n\t\t\t\t\t\t\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\" style={{ fontWeight: \"bold\" }}>{r.textLeft}</Typography>\n\t\t\t\t\t\t\t\t\t</Suspense>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t{rightElement}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</TableBody>\n\t\t</Table>\n\t)\n};\n\nconst TopBar = connect(({ market, time, viewport }) => ({ market, time, viewport }))(unconnectedTopBar);\n\nexport default TopBar;"],"sourceRoot":""}