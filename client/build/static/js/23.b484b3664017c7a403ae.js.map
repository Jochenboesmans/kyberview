{"version":3,"sources":["webpack:///./src/util/formatFunctions.js","webpack:///./src/components/Body/Market/MarketBody/MarketPairSpread.jsx"],"names":["__webpack_require__","d","__webpack_exports__","formatPrice","formatVolume","formatPercentage","price","sd","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","useGrouping","format","minimumSignificantDigits","maximumSignificantDigits","volume","percentage","r","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","lodash_reduce__WEBPACK_IMPORTED_MODULE_1__","lodash_reduce__WEBPACK_IMPORTED_MODULE_1___default","_util_formatFunctions__WEBPACK_IMPORTED_MODULE_2__","TableCell","lazy","e","then","t","bind","unconnectedMarketPairSpread","_ref","p","innerBid","reduce","market_data","max","emd","current_bid_dai","innerAsk","min","current_ask_dai","Number","MAX_VALUE","spreadRatioDifference","colorString","spreadString","concat","a","createElement","color","align"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAA,IAAMF,EAAc,SAACG,GACpB,IAAMC,EAAK,SAACD,GACX,OAAIA,EAAQ,IACJ,EACGA,EAAQ,GACX,EACGA,EAAQ,EACX,EAEA,GAGT,OAAIA,EAAQ,KACH,IAAIE,KAAKC,aAAa,QAAS,CACtCC,MAAO,WACPC,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,EACvBC,YAAa,SACXC,OAAOT,GAEF,IAAIE,KAAKC,aAAa,QAAS,CACtCC,MAAO,WACPC,SAAU,MACVK,yBAA0BT,EAAGD,GAC7BW,yBAA0BV,EAAGD,GAC7BQ,YAAa,SACXC,OAAOT,IAINF,EAAe,SAACc,GACrB,OAAQ,IAAIV,KAAKC,aAAa,QAAS,CACtCC,MAAO,WAAYC,SAAU,MAAOG,YAAa,SAC/CC,OAAOG,IAGLb,EAAmB,SAACc,GACzB,OAAQ,IAAIX,KAAKC,aAAa,QAAS,CACtCC,MAAO,UAAWI,YAAa,OAAQD,sBAAuB,EAAGD,sBAAuB,IACtFG,OAAOI,sCCxCXnB,EAAAoB,EAAAlB,GAAA,IAAAmB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAAuB,EAAAF,GAAAG,EAAAxB,EAAA,KAAAyB,EAAAzB,EAAAuB,EAAAC,GAAAE,EAAA1B,EAAA,KAMM2B,EAAYC,eAAK,kBAAM5B,EAAA6B,EAAA,GAAAC,KAAA9B,EAAA+B,EAAAC,KAAA,eAqBdC,UAnBqB,SAAAC,GAAW,IAARC,EAAQD,EAARC,EAChCC,EAAWC,IAAOF,EAAEG,YAAa,SAACC,EAAKC,GAAN,OAAcA,EAAIC,gBAAkBF,EAAOC,EAAIC,gBAAkBF,GAAK,GACvGG,EAAWL,IAAOF,EAAEG,YAAa,SAACK,EAAKH,GAAN,OAAcA,EAAII,gBAAkBD,EAAMH,EAAII,gBAAkBD,GAAKE,OAAOC,WAC7GC,EAA0BL,EAAWN,EAAY,GAAM,EAGvDY,EAAcD,IAFI,IAEsC,MAAQ,QAChEE,EAAY,GAAAC,OAAM/C,YAAYiC,GAAlB,OAAAc,OAAiC/C,YAAYuC,GAA7C,MAAAQ,OAA2D7C,YAAiB0C,GAA5E,KAClB,OACCzB,EAAA6B,EAAAC,cAACzB,EAAD,CACCjB,MAAO,CAAE2C,MAAOL,GAChBM,MAAM,SAELL","file":"static/js/23.b484b3664017c7a403ae.js","sourcesContent":["const formatPrice = (price) => {\n\tconst sd = (price) => {\n\t\tif (price < 0.01) {\n\t\t\treturn 1;\n\t\t} else if (price < 0.1) {\n\t\t\treturn 2;\n\t\t} else if (price < 1) {\n\t\t\treturn 3;\n\t\t} else {\n\t\t\treturn 4;\n\t\t}\n\t};\n\tif (price < 0.001) {\n\t\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t\tmaximumFractionDigits: 3,\n\t\t\tminimumFractionDigits: 3,\n\t\t\tuseGrouping: \"true\"\n\t\t}).format(price));\n\t} else {\n\t\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\t\tstyle: \"currency\",\n\t\t\tcurrency: \"USD\",\n\t\t\tminimumSignificantDigits: sd(price),\n\t\t\tmaximumSignificantDigits: sd(price),\n\t\t\tuseGrouping: \"true\"\n\t\t}).format(price));\n\t}\n};\n\nconst formatVolume = (volume) => {\n\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\tstyle: \"currency\", currency: \"USD\", useGrouping: \"true\"\n\t}).format(volume));\n};\n\nconst formatPercentage = (percentage) => {\n\treturn (new Intl.NumberFormat(\"en-US\", {\n\t\tstyle: \"percent\", useGrouping: \"true\", minimumFractionDigits: 2, maximumFractionDigits: 2\n\t}).format(percentage));\n};\n\nexport {\n\tformatPrice, formatVolume, formatPercentage,\n};","import React, { lazy } from \"react\";\n// import { connect } from \"react-redux\";\nimport reduce from \"lodash/reduce\";\n\nimport { formatPercentage, formatPrice } from \"../../../../util/formatFunctions\";\n\nconst TableCell = lazy(() => import(\"@material-ui/core/TableCell/TableCell\"));\n\nconst unconnectedMarketPairSpread = ({ p }) => {\n\tconst innerBid = reduce(p.market_data, (max, emd) => emd.current_bid_dai > max ?  emd.current_bid_dai : max, 0);\n\tconst innerAsk = reduce(p.market_data, (min, emd) => emd.current_ask_dai < min ? emd.current_ask_dai : min, Number.MAX_VALUE);\n\tconst spreadRatioDifference = ((innerAsk / innerBid) - 1) || 0;\n\tconst arbitrageLimit = -0.01;\n\n\tconst colorString = spreadRatioDifference <= arbitrageLimit ? \"red\" : \"black\";\n\tconst spreadString = `${formatPrice(innerBid)} - ${formatPrice(innerAsk)} (${formatPercentage(spreadRatioDifference)})`;\n\treturn (\n\t\t<TableCell\n\t\t\tstyle={{ color: colorString }}\n\t\t\talign=\"right\"\n\t\t>\n\t\t\t{spreadString}\n\t\t</TableCell>\n\t)\n};\n\n//const MarketPairSpread = connect(null, null)(unconnectedMarketPairSpread);\nexport default unconnectedMarketPairSpread;"],"sourceRoot":""}